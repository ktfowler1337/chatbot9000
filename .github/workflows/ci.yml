name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '9'
  PYTHON_VERSION: '3.13'

jobs:
  frontend-test:
    name: Frontend Test & Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linting
        run: pnpm run lint

      - name: Run type checking
        run: pnpm run type-check

      - name: Run tests with coverage
        run: pnpm run test:coverage
        env:
          NODE_OPTIONS: '--max-old-space-size=4096'

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  backend-test:
    name: Backend Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run backend tests
        run: |
          cd backend
          python -m pytest --tb=short --cov=app --cov-report=xml --cov-report=term-missing
        env:
          # Use a dummy API key for testing
          GOOGLE_API_KEY: "test-api-key-for-ci"

      - name: Upload backend coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: codecov-backend
          fail_ci_if_error: false

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 7

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level=high
        continue-on-error: true

      - name: Run dependency vulnerability check
        uses: actions/dependency-review-action@v4
        if: github.event_name == 'pull_request'

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test, build, security]
    if: always()
    
    steps:
      - name: Check job statuses
        run: |
          if [[ "${{ needs.frontend-test.result }}" != "success" ]]; then
            echo "❌ Frontend tests failed"
            exit 1
          fi
          if [[ "${{ needs.backend-test.result }}" != "success" ]]; then
            echo "❌ Backend tests failed"
            exit 1
          fi
          if [[ "${{ needs.build.result }}" != "success" ]]; then
            echo "❌ Build failed"
            exit 1
          fi
          echo "✅ All quality checks passed"

  # This job only runs on PRs to main branch
  pr-checks:
    name: PR Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.base_ref == 'main'
    needs: [frontend-test, backend-test, build]
    
    steps:
      - name: Validate PR requirements
        run: |
          echo "✅ Frontend tests passed"
          echo "✅ Backend tests passed"
          echo "✅ Build successful"
          echo "✅ Ready for merge to main"
